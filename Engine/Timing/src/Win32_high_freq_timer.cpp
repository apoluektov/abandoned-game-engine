////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2009 Alexander Poluektov
// All rights reserved
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// $Id: //depot/main/Engine/Timing/src/Win32_high_freq_timer.cpp#2 $
// $DateTime: 2009/07/30 12:22:26 $

// Win32 high frequency timer implementation.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Engine/Timing/Win32_high_freq_timer.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Engine
{
namespace Timing
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Win32_high_freq_timer::Win32_high_freq_timer()
{
   // initialize start tick number and frequency
   ::QueryPerformanceCounter(&m_start);
   ::QueryPerformanceFrequency(&m_freq);

   // due to performance reason exception is not thrown in case of fail
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Milliseconds Win32_high_freq_timer::get_app_time() const
{
   LARGE_INTEGER cur_count;
   if (::QueryPerformanceCounter(&cur_count))
   {
      // count number of milliseconds
      return static_cast<int>(((cur_count.QuadPart - m_start.QuadPart)*1000) / m_freq.QuadPart);
   }
   else
   {
      // return value that indicate error
      return invalid_time;
   }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

} // namespace Timing
} // namespace Engine

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
