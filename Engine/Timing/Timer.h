////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2009 Alexander Poluektov
// All rights reserved
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// $Id: //depot/main/Engine/Timing/Timer.h#3 $
// $DateTime: 2009/08/11 18:52:15 $

// Timer interface.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef ENGINE_TIMING_TIMER_H_INCLUDED
#define ENGINE_TIMING_TIMER_H_INCLUDED

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "boost/noncopyable.hpp"

#include <limits>                // for numeric_limits

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Engine
{
namespace Timing
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef int Milliseconds;

/// Value that Timer returns in case of error.
static const Milliseconds invalid_time = std::numeric_limits<Milliseconds>::min();

/// Time provider for application.
class Timer : boost::noncopyable
{
public:

   /// Gets time (in ms) from application startup.
   /// \return Non-negative value on success or invalid_time on fail.
   virtual Milliseconds get_app_time() const = 0;

   virtual ~Timer() { }

   // copying is disallowed
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

} // namespace Timing
} // namespace Engine

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif // ENGINE_TIMING_TIMER_H_INCLUDED

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
