////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2009 Alexander Poluektov
// All rights reserved
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// $Id: //depot/main/Common/test/Decorated_stream_test.cpp#2 $
// $DateTime: 2009/07/30 12:22:26 $

// Unit-tests for Decorated_stream.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Common/Decorated_stream.h"

#include "boost/test/unit_test.hpp"

#include <sstream>
#include <iomanip>              // for formatting test

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Common
{
namespace Decorated_stream_test
{

using namespace std;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void test_simple0()
{
   ostringstream strout;
   Decorated_stream out(strout);

   out << 1 << 'a' << "alpha";

   BOOST_CHECK(strout.str() == "1aalpha\n");
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void test_simple1()
{
   ostringstream strout;
   Decorated_stream out(strout);

   out << 1 << 'a' << "alpha";
   out << 2 << 'b' << "beta";
   out << 3 << 'c' << "gamma";

   BOOST_CHECK(strout.str() == "1aalpha\n2bbeta\n3cgamma\n");
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void test_simple2()
{
   ostringstream strout;
   Decorated_stream out(strout);

   out << "funny\n" << "string\n";

   BOOST_CHECK(strout.str() == "funny\nstring\n\n");
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void test_formatting()
{
   ostringstream strout;
   Decorated_stream out(strout);

   out << setw(4) << 1 << setw(4) << setfill('X') << 'a' << "alpha";
   out << setw(2) << 2 << setw(3) << setfill('X') << 'b' << "beta";

   // note that std::setfill() is sticky

   BOOST_CHECK(strout.str() == "   1XXXaalpha\nX2XXbbeta\n");
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

} // namespace Decorated_stream_test
} // namespace Common

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

boost::unit_test::test_suite* init_unit_test_suite(int, char** const)
{
   using namespace Common::Decorated_stream_test;

   boost::unit_test::test_suite* test = BOOST_TEST_SUITE("Decorated_stream tests");

   test->add(BOOST_TEST_CASE(test_simple0));
   test->add(BOOST_TEST_CASE(test_simple1));
   test->add(BOOST_TEST_CASE(test_simple2));
   test->add(BOOST_TEST_CASE(test_formatting));

   return test;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
